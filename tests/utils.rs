#[cfg(test)]
mod test {
    use approx::*;
    use qd::utils;

    #[test]
    fn quick_two_sum() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (1.0, 0.0)),
            // Randomly generated tests.
            (
                (2.1444412884165498, 0.752263166877959688),
                (2.89670445529450937, 1.11022302462515654e-16),
            ),
            (
                (1.34304868694046298, 0.268729237236317198),
                (1.61177792417678023, -5.5511151231257827e-17),
            ),
            (
                (0.744398324776835651, 0.539513073945937838),
                (1.28391139872277349, 0.0),
            ),
            (
                (5.95709484480851525, 3.39335489859243022),
                (9.35044974340094548, 0.0),
            ),
            (
                (2.02319915238893033, 0.132977260008912301),
                (2.15617641239784241, 2.22044604925031308e-16),
            ),
            (
                (0.772232423910899302, 0.504393438458688892),
                (1.2766258623695883, -1.11022302462515654e-16),
            ),
            (
                (0.884288556669714398, 0.0642259082888150395),
                (0.948514464958529424, 1.38777878078144568e-17),
            ),
            (
                (2.06192572792998696, 0.00201462619666889064),
                (2.06394035412665566, 1.89952220619460377e-16),
            ),
            (
                (1.06838003508237311, 0.773158487035844888),
                (1.84153852211821789, 1.11022302462515654e-16),
            ),
            (
                (1.55024102225678351, 0.422643007733837284),
                (1.97288402999062074, 5.5511151231257827e-17),
            ),
            (
                (0.262731207844016545, 0.156049281566387948),
                (0.418780489410404466, 2.77555756156289135e-17),
            ),
            (
                (1.65244827763933544, 0.375300915483264885),
                (2.02774919312260016, 1.66533453693773481e-16),
            ),
            (
                (1.31413863955615651, 0.786306217162804355),
                (2.10044485671896108, -2.22044604925031308e-16),
            ),
            (
                (39.6450436182968176, 1.65221214212438072),
                (41.2972557604212014, -3.10862446895043831e-15),
            ),
            (
                (20.4760753068983554, 0.76221582892462425),
                (21.2382911358229798, -1.11022302462515654e-16),
            ),
            (
                (6.71445692149190876, 0.310421745842731189),
                (7.02487866733464017, -2.22044604925031308e-16),
            ),
            (
                (0.791776165997624015, 0.452735608343829865),
                (1.24451177434145377, 1.11022302462515654e-16),
            ),
            (
                (0.640214502151845943, 0.588976378521783084),
                (1.22919088067362914, -1.11022302462515654e-16),
            ),
            (
                (2.20227638167814765, 0.754453844947373886),
                (2.95673022662552132, 2.22044604925031308e-16),
            ),
            (
                (0.606048073987869418, 0.303691991683540607),
                (0.909740065671410081, -5.5511151231257827e-17),
            ),
            (
                (4.63173375461826708, 0.248069361169850844),
                (4.87980311578811765, 2.77555756156289135e-16),
            ),
            (
                (5.85950092112536769, 0.962200961991810266),
                (6.82170188311717762, 3.33066907387546962e-16),
            ),
            (
                (1.92543043269413894, 0.815301059417719243),
                (2.74073149211185818, 0.0),
            ),
            (
                (2.78685181560773243, 0.246164371595069625),
                (3.03301618720280208, -2.77555756156289135e-17),
            ),
            (
                (2.2412131674612108, 0.265979768360351032),
                (2.50719293582156189, -5.5511151231257827e-17),
            ),
            (
                (38.0275417317378128, 1.15454960322633315),
                (39.1820913349641486, -2.6645352591003757e-15),
            ),
            (
                (1.21646363642497346, 0.843819391478959568),
                (2.06028302790393303, 0.0),
            ),
            (
                (0.856358102868737148, 0.0121655017945875837),
                (0.868523604663324678, 5.37764277552810199e-17),
            ),
            (
                (0.727919281413975439, 0.345985891356199227),
                (1.07390517277017472, -5.5511151231257827e-17),
            ),
            (
                (0.105133117648286034, 0.037986929951214006),
                (0.143120047599500033, 6.93889390390722838e-18),
            ),
        ];

        // Execute tests.
        for ((a, b), (true_s, true_e)) in data {
            let (pred_s, pred_e) = utils::quick_two_sum(a, b);

            assert_relative_eq!(true_s, pred_s);
            assert_relative_eq!(true_e, pred_e);
        }
    }

    #[test]
    fn two_sum() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (1.0, 0.0)),
            // Randomly generated tests.
            (
                (0.0154087057153737932, 0.945864454896678808),
                (0.961273160612052591, 1.04083408558608426e-17),
            ),
            (
                (0.186351246190932573, 0.771291869710100331),
                (0.957643115901032904, 0.0),
            ),
            (
                (5.37293706521899939, 1.75283270718568063),
                (7.12576977240467979, 2.22044604925031308e-16),
            ),
            (
                (0.323061146010921396, 2.23062234326653286),
                (2.55368348927745448, -2.22044604925031308e-16),
            ),
            (
                (1.48720407463082505, 1.81178657868180371),
                (3.29899065331262875, 0.0),
            ),
            (
                (0.417335836378879832, 0.419260121460533319),
                (0.836595957839413096, 5.5511151231257827e-17),
            ),
            (
                (0.134727724773863716, 1.86750300924126944),
                (2.00223073401513307, 8.32667268468867405e-17),
            ),
            (
                (1.12759738219549077, 0.175698999442977233),
                (1.30329638163846795, 5.5511151231257827e-17),
            ),
            (
                (0.20642427891950399, 0.946202290585980488),
                (1.15262656950548448, 0.0),
            ),
            (
                (1.55330902655918779, 1.68256556785948375),
                (3.23587459441867153, 0.0),
            ),
            (
                (1.78031340165482121, 1.00494418422807552),
                (2.78525758588289651, 2.22044604925031308e-16),
            ),
            (
                (0.955053935328106562, 0.50895452240827832),
                (1.46400845773638499, -1.11022302462515654e-16),
            ),
            (
                (2.59410608407373511, 1.50519024302692728),
                (4.09929632710066194, 4.44089209850062616e-16),
            ),
            (
                (7.50379098869965855, 0.86086962201249928),
                (8.36466061071215705, 7.77156117237609578e-16),
            ),
            (
                (2.42416585719418931, 0.725886141212827796),
                (3.150051998407017, 1.11022302462515654e-16),
            ),
            (
                (2.27522477597292871, 0.807964046144521886),
                (3.08318882211745038, 2.22044604925031308e-16),
            ),
            (
                (2.36514321589575971, 1.40039499817234248),
                (3.76553821406810219, 0.0),
            ),
            (
                (30.3449098155560542, 1.53898315847129208),
                (31.8838929740273471, -8.88178419700125232e-16),
            ),
            (
                (0.903659082787782175, 1.49848119840159399),
                (2.40214028118937595, 2.22044604925031308e-16),
            ),
            (
                (0.495765077317581238, 1.25416558411365409),
                (1.74993066143123532, 0.0),
            ),
            (
                (1.00891444122606844, 0.218811712069532843),
                (1.2277261532956012, 8.32667268468867405e-17),
            ),
            (
                (3.61665157570120899, 0.969506028190593172),
                (4.58615760389180238, -2.22044604925031308e-16),
            ),
            (
                (0.66451562470776393, 3.00238681193001256),
                (3.66690243663777649, 0.0),
            ),
            (
                (0.272013858287743493, 0.553399980293108218),
                (0.825413838580851711, 0.0),
            ),
            (
                (1.45942306743955963, 1.20091209241545216),
                (2.66033515985501179, 0.0),
            ),
            (
                (1.63476582254975233, 0.815181307242294428),
                (2.44994712979204676, 0.0),
            ),
            (
                (3.22388938695536176, 2.69545269168618917),
                (5.91934207864155049, 4.44089209850062616e-16),
            ),
            (
                (0.893387112605809497, 1.95643846581366043),
                (2.84982557841946971, 2.22044604925031308e-16),
            ),
            (
                (0.542448853075546578, 14.2152862024469346),
                (14.7577350555224811, 1.11022302462515654e-16),
            ),
            (
                (1.94740394867025923, 1.53759965346527516),
                (3.48500360213553417, 2.22044604925031308e-16),
            ),
        ];

        // Execute tests.
        for ((a, b), (true_s, true_e)) in data {
            let (pred_s, pred_e) = utils::two_sum(a, b);

            assert_relative_eq!(true_s, pred_s);
            assert_relative_eq!(true_e, pred_e);
        }
    }

    #[test]
    fn two_diff() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (1.0, 0.0)),
            // Randomly generated tests.
            (
                (0.469191201338906738, 1.47686130215989087),
                (-1.00767010082098407, -5.5511151231257827e-17),
            ),
            (
                (6.98410469606405826, 0.106360699155841731),
                (6.87774399690821614, 3.88578058618804789e-16),
            ),
            (
                (0.86784593714316105, 3.15281206650210066),
                (-2.28496612935893939, -2.22044604925031308e-16),
            ),
            (
                (0.1616632026381567, 132.67513885235374),
                (-132.513475649715588, 4.32986979603811051e-15),
            ),
            (
                (0.464427518752365431, 0.0765861688260021795),
                (0.387841349926363266, -1.38777878078144568e-17),
            ),
            (
                (0.550141527335085256, 0.365329000205148746),
                (0.18481252712993651, 0.0),
            ),
            (
                (3.59808430954617053, 4.08008552830280991),
                (-0.482001218756639371, 0.0),
            ),
            (
                (1.12119148819094727, 0.74935069687914202),
                (0.371840791311805252, 0.0),
            ),
            (
                (0.398861430748572388, 0.629454902301814334),
                (-0.230593471553241947, 0.0),
            ),
            (
                (1.15500679729635292, 5.71844329022848097),
                (-4.56343649293212827, 2.22044604925031308e-16),
            ),
            (
                (0.222265206197055476, 1.29369988476760223),
                (-1.07143467857054686, 1.11022302462515654e-16),
            ),
            (
                (1.11253856063407164, 2.28324884156334162),
                (-1.17071028092926999, 0.0),
            ),
            (
                (0.810820579843634093, 0.191732690374813053),
                (0.619087889468820984, 5.5511151231257827e-17),
            ),
            (
                (0.20038381601893579, 1.07655587763244931),
                (-0.876172061613513575, 5.5511151231257827e-17),
            ),
            (
                (2.34001409806340144, 24.3153639164632054),
                (-21.9753498183998026, -1.33226762955018785e-15),
            ),
            (
                (2.90985760528733284, 1.03140326623533429),
                (1.87845433905199855, 0.0),
            ),
            (
                (2.38228185378057367, 2.9381697423338391),
                (-0.55588788855326543, 0.0),
            ),
            (
                (1.57416622025624409, 0.365088540124731076),
                (1.20907768013151307, -5.5511151231257827e-17),
            ),
            (
                (0.461326592198824437, 0.994302234324117351),
                (-0.532975642125292914, 0.0),
            ),
            (
                (0.963680997938153205, 0.450509244713335755),
                (0.513171753224817451, 0.0),
            ),
            (
                (0.153550967386071852, 4.09390462906652175),
                (-3.94035366168044998, 8.32667268468867405e-17),
            ),
            (
                (8.08293919275347683, 1.22041802174337888),
                (6.86252117101009773, 2.22044604925031308e-16),
            ),
            (
                (2.08148633230782831, 29.9879960694918175),
                (-27.9065097371839883, -8.88178419700125232e-16),
            ),
            (
                (1.04883729798832825, 14.0117920183303557),
                (-12.9629547203420277, 2.22044604925031308e-16),
            ),
            (
                (1.81775837737767243, 0.62006339954716394),
                (1.19769497783050838, 1.11022302462515654e-16),
            ),
            (
                (1.44623162722339305, 1.53282386090170508),
                (-0.0865922336783120361, 0.0),
            ),
            (
                (0.653604745627396677, 0.470050149375017212),
                (0.183554596252379465, 0.0),
            ),
            (
                (0.230757685607323931, 3.26082248262502272),
                (-3.03006479701769882, 2.77555756156289135e-17),
            ),
            (
                (0.732668092755989764, 1.00686176171197195),
                (-0.274193668955982184, 0.0),
            ),
            (
                (22.2438650841505172, 8.12700205028681566),
                (14.1168630338637016, 0.0),
            ),
        ];

        // Execute tests.
        for ((a, b), (true_s, true_e)) in data {
            let (pred_s, pred_e) = utils::two_diff(a, b);

            assert_relative_eq!(true_s, pred_s);
            assert_relative_eq!(true_e, pred_e);
        }
    }

    #[test]
    fn split() {
        // Define tests.
        let data = [
            (0.0, (0.0, 0.0)),
            (1.0, (1.0, 0.0)),
            // Randomly generated tests.
            (
                0.461686876959801595,
                (0.461686879396438599, -2.43663700327800825e-09),
            ),
            (
                0.222319233012113843,
                (0.222319234162569046, -1.15045520332479612e-09),
            ),
            (
                127.432300775901112,
                (127.432300567626953, 2.0827415880830813e-07),
            ),
            (
                1.43990706594641127,
                (1.43990707397460938, -8.02819810630239772e-09),
            ),
            (
                0.418340806872179616,
                (0.418340809643268585, -2.77108896939992633e-09),
            ),
            (
                4.54806179590105941,
                (4.54806184768676758, -5.17857081661077245e-08),
            ),
            (
                4.32770752067620101,
                (4.32770752906799316, -8.39179215006424783e-09),
            ),
            (
                0.451226472418484625,
                (0.451226472854614258, -4.3612963240846625e-10),
            ),
            (
                0.799924094846237943,
                (0.799924090504646301, 4.34159164175440537e-09),
            ),
            (
                0.914358105646100094,
                (0.91435810923576355, -3.58966345537226061e-09),
            ),
            (
                0.956838197599684914,
                (0.95683819055557251, 7.04411240448621356e-09),
            ),
            (
                0.765154030116168005,
                (0.765154033899307251, -3.78313924631612508e-09),
            ),
            (
                0.681726263687376544,
                (0.681726261973381042, 1.71399550108475296e-09),
            ),
            (
                3.1211418982489052,
                (3.12114191055297852, -1.23040733157608884e-08),
            ),
            (
                1.09073240343074551,
                (1.0907323956489563, 7.7817892130127575e-09),
            ),
            (
                0.38599905882831681,
                (0.385999061167240143, -2.33892333278973297e-09),
            ),
            (
                0.0811728975478044484,
                (0.0811728984117507935, -8.6394634501996137e-10),
            ),
            (
                0.547543829632223256,
                (0.547543823719024658, 5.91319859744032783e-09),
            ),
            (
                4.43113507401649809,
                (4.43113505840301514, 1.56134829509824158e-08),
            ),
            (
                0.339223844783379469,
                (0.339223846793174744, -2.00979527464895114e-09),
            ),
            (
                9.4897910075865326,
                (9.48979091644287109, 9.11436615069760592e-08),
            ),
            (
                0.0459620839931505765,
                (0.0459620840847492218, -9.15986453353667684e-11),
            ),
            (
                0.535006737781549058,
                (0.535006731748580933, 6.03296812506926017e-09),
            ),
            (
                0.267434019132691492,
                (0.267434015870094299, 3.26259719241051016e-09),
            ),
            (
                6.78667132323689959,
                (6.78667128086090088, 4.23759987100424951e-08),
            ),
            (
                0.780202007098153905,
                (0.780202001333236694, 5.76491721027139192e-09),
            ),
            (
                0.87741926612853105,
                (0.877419263124465942, 3.00406510778117308e-09),
            ),
            (
                0.743991208746712984,
                (0.74399121105670929, -2.30999630534967082e-09),
            ),
            (
                0.64019497369421996,
                (0.64019496738910675, 6.3051132093150386e-09),
            ),
            (
                2.0024668520498361,
                (2.00246685743331909, -5.38348299272684017e-09),
            ),
        ];

        // Execute tests.
        for (a, (true_hi, true_lo)) in data {
            let (pred_hi, pred_lo) = utils::split(a);

            assert_relative_eq!(true_hi, pred_hi);
            assert_relative_eq!(true_lo, pred_lo);
        }
    }

    #[test]
    fn two_prod() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (0.0, 0.0)),
            // Randomly generated tests.
            (
                (0.610689056734221913, 0.187251998594476776),
                (0.114352746393258875, -5.06355302365633116e-18),
            ),
            (
                (0.471215728532495048, 0.486294041659686593),
                (0.229149401121680724, -8.01793355798729403e-18),
            ),
            (
                (1.03022744589788595, 0.887305452733829769),
                (0.914126430301240855, -4.63111422413775714e-17),
            ),
            (
                (1.25819184103023396, 0.0738332988609551599),
                (0.0928964542232006418, 6.82093301938686815e-18),
            ),
            (
                (3.22420106235598114, 4.3023990238405494),
                (13.8717995033460362, -5.82135244250896991e-16),
            ),
            (
                (0.593038791808992216, 1.04211208237705466),
                (0.618012890262441439, 2.60459588913086659e-17),
            ),
            (
                (1.49037060042705405, 10.858876205906336),
                (16.1837498509596749, 1.61978830222416349e-15),
            ),
            (
                (0.225622599374666222, 0.3921291512752626),
                (0.0884731984013064632, -3.50788405980086871e-18),
            ),
            (
                (1.74515351412410835, 0.221634205479331575),
                (0.386785712542360216, -7.27355320105342074e-18),
            ),
            (
                (1.65275590573194076, 1.08596797909358567),
                (1.79483999088270441, 7.57584640964191975e-17),
            ),
            (
                (0.981242739241308892, 0.236775964871092093),
                (0.232334696356614329, 4.21487835373261831e-18),
            ),
            (
                (2.7027514930472285, 1.16075221556156194),
                (3.13722478366688984, 1.18300856671791317e-16),
            ),
            (
                (0.836927622788162351, 1.03077307374756866),
                (0.862682458245599748, 4.59571456790532743e-17),
            ),
            (
                (2.69043093012892731, 0.0900858276265592839),
                (0.242369697012758123, -1.25333897583808504e-17),
            ),
            (
                (0.952733561247258498, 1.28835311720749912),
                (1.22745725350110724, 3.30911432415184067e-17),
            ),
            (
                (5.18066716506571101, 0.314410347009930258),
                (1.62885536111126195, -1.08799702613742617e-16),
            ),
            (
                (0.858409268763091871, 2.42413054769813119),
                (2.08089613083582625, -5.96010729295522424e-17),
            ),
            (
                (0.0930632055749543025, 3.85169131254065267),
                (0.358450740430236336, -1.45694321356577369e-17),
            ),
            (
                (4.74304852105777819, 0.415038625585316678),
                (1.96854833926428929, -8.24361467242670398e-17),
            ),
            (
                (6.16691106384915599, 8.56602376695796153),
                (52.8259067416478771, 8.29864001867802244e-17),
            ),
            (
                (5.04094785073422269, 16.7738118178169167),
                (84.5559106316444939, -2.98127847816302426e-15),
            ),
            (
                (12.2030986865304953, 1.19130663483721388),
                (14.5376324308370695, -2.61676905541048643e-16),
            ),
            (
                (0.77457862225948293, 0.393658127669122671),
                (0.304919170171196685, -1.08078465946079358e-17),
            ),
            (
                (1.1269456700583087, 8.99672564250829154),
                (10.1388210075272749, -4.02115260216859815e-16),
            ),
            (
                (0.144946021410655629, 3.7298732380729378),
                (0.540630286224751511, -2.83684449432493114e-17),
            ),
            (
                (2.85355171325557722, 0.632889641436656936),
                (1.80598332062328026, 8.82529743307729681e-17),
            ),
            (
                (0.865526651652187451, 1.10715887619925391),
                (0.958275514963738972, -5.97462815896618748e-18),
            ),
            (
                (3.47081771560270802, 2.41520735501552064),
                (8.3827444746418287, -7.20328827046375226e-16),
            ),
            (
                (0.380452162604547839, 0.738661910772862695),
                (0.281025521387143151, 1.39738828672634136e-17),
            ),
            (
                (3.61202890886055927, 0.770563511000690204),
                (2.78329767784758442, 1.84210412504849487e-16),
            ),
        ];

        // Execute tests.
        for ((a, b), (true_s, true_e)) in data {
            let (pred_s, pred_e) = utils::two_prod(a, b);

            assert_relative_eq!(true_s, pred_s);
            assert_relative_eq!(true_e, pred_e);
        }
    }
}
