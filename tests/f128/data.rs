#[cfg(test)]
mod test {
    use core::cmp::Ordering;

    use approx::*;
    use num_traits::{One, Zero};
    use qd::f128::f128;

    #[test]
    fn index_from() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (1.0, 0.0)),
            // Randomly generated tests.
            (
                (1.50953211842200319, 0.185215697862007644),
                (1.50953211842200319, 0.185215697862007644),
            ),
            (
                (0.188183438240726336, 2.72474591633036045),
                (0.188183438240726336, 2.72474591633036045),
            ),
            (
                (0.23551358381471893, 2.25722104711964233),
                (0.23551358381471893, 2.25722104711964233),
            ),
            (
                (0.453801586238060883, 0.911284995758016136),
                (0.453801586238060883, 0.911284995758016136),
            ),
            (
                (0.286611929157434997, 0.812245610396971296),
                (0.286611929157434997, 0.812245610396971296),
            ),
            (
                (1.54700692170254905, 0.981826669393816909),
                (1.54700692170254905, 0.981826669393816909),
            ),
            (
                (0.672786111650033436, 2.72433060490790924),
                (0.672786111650033436, 2.72433060490790924),
            ),
            (
                (105.481342687118826, 0.912476919137740983),
                (105.481342687118826, 0.912476919137740983),
            ),
            (
                (0.800205607958772269, 0.249776364362472664),
                (0.800205607958772269, 0.249776364362472664),
            ),
            (
                (0.620160016460584385, 1.31904396948202396),
                (0.620160016460584385, 1.31904396948202396),
            ),
            (
                (3.04183350115141371, 21.5841388946337176),
                (3.04183350115141371, 21.5841388946337176),
            ),
            (
                (1.71679330092971161, 8.04912329693947015),
                (1.71679330092971161, 8.04912329693947015),
            ),
            (
                (0.447104146556772386, 33.2530442311356325),
                (0.447104146556772386, 33.2530442311356325),
            ),
            (
                (25.1648544351193877, 0.510411350259083463),
                (25.1648544351193877, 0.510411350259083463),
            ),
            (
                (0.673849237731303674, 1.39619377154339896),
                (0.673849237731303674, 1.39619377154339896),
            ),
            (
                (3.68647497597744822, 0.262220262781379498),
                (3.68647497597744822, 0.262220262781379498),
            ),
            (
                (3.11066896370674639, 0.499460076840080869),
                (3.11066896370674639, 0.499460076840080869),
            ),
            (
                (0.460059563392201554, 0.161752663558540261),
                (0.460059563392201554, 0.161752663558540261),
            ),
            (
                (0.390474943893390436, 2.91707860397945495),
                (0.390474943893390436, 2.91707860397945495),
            ),
            (
                (0.78881252549469727, 0.558175082644223663),
                (0.78881252549469727, 0.558175082644223663),
            ),
            (
                (0.236732464580251961, 21.7533220782322552),
                (0.236732464580251961, 21.7533220782322552),
            ),
            (
                (0.33859286157634394, 0.426855334607654457),
                (0.33859286157634394, 0.426855334607654457),
            ),
            (
                (23.3173314536593708, 0.504856117093058554),
                (23.3173314536593708, 0.504856117093058554),
            ),
            (
                (0.555924590152899634, 1.08753587492513737),
                (0.555924590152899634, 1.08753587492513737),
            ),
            (
                (1.69356121794607395, 0.765198496334710709),
                (1.69356121794607395, 0.765198496334710709),
            ),
            (
                (0.771337120484817063, 110.37125481784625),
                (0.771337120484817063, 110.37125481784625),
            ),
            (
                (1.4731369829225105, 1.03858227145390125),
                (1.4731369829225105, 1.03858227145390125),
            ),
            (
                (0.242370197127763143, 4.27143506081443736),
                (0.242370197127763143, 4.27143506081443736),
            ),
            (
                (1.36788481175347632, 1.0291866537869776),
                (1.36788481175347632, 1.0291866537869776),
            ),
            (
                (0.905947367905618139, 0.432046575017998646),
                (0.905947367905618139, 0.432046575017998646),
            ),
        ];

        // Execute tests.
        for ((hi, lo), (true_hi, true_lo)) in data {
            let a: f128 = match hi > lo {
                true => [hi, lo].into(),
                false => (hi, lo).into(),
            };

            assert_relative_eq!(a[0], true_hi);
            assert_relative_eq!(a[1], true_lo);
        }
    }

    #[test]
    fn copy() {
        let a: f128 = (1.0, 0.0).into();
        let b = a;

        assert_eq!(a, b);
    }

    #[test]
    fn clone() {
        let a: f128 = (1.0, 0.0).into();
        let b = a.clone();

        assert_eq!(a, b);
    }

    #[test]
    fn debug() {
        let a: f128 = (1.0, 0.0).into();
        let a = format!("{:?}", a);

        assert_eq!(a, "f128([1.0, 0.0])");
    }

    #[test]
    fn partial_eq_f64_f128() {
        // Define tests.
        let data = [
            ((0.0, 0.0), 0.0, true),
            ((1.0, 0.0), 1.0, true),
            // Randomly generated tests.
            ((1.20766985097703516, 0.0), 0.477767971101108913, false),
            (
                (0.958453208960686198, 1.12169301651742948),
                0.958453208960686198,
                false,
            ),
            (
                (0.856883711000406612, 10.7958006662744204),
                0.856883711000406612,
                false,
            ),
            ((0.369690625397675277, 0.0), 0.369690625397675277, true),
            ((0.903564550538342948, 0.0), 0.903564550538342948, true),
            ((0.104487758407563788, 0.0), 0.104487758407563788, true),
            (
                (0.495752952799650926, 0.722494388159919287),
                0.74255076131902209,
                false,
            ),
            ((2.6175719073907171, 0.0), 0.261475175740884247, false),
            ((21.1806427417098107, 0.0), 21.1806427417098107, true),
            (
                (0.20451013523530423, 8.25907831830623707),
                0.725164569320699504,
                false,
            ),
            ((1.00876270715182259, 0.0), 0.81981284535481258, false),
            (
                (1.20255428166047174, 4.47705548947515108),
                0.184664379425656222,
                false,
            ),
            (
                (0.144021492775603638, 4.02372703769864604),
                0.946407801446694785,
                false,
            ),
            (
                (1.28321245217276836, 0.197448076510294668),
                0.807319015640448279,
                false,
            ),
            (
                (0.193884988650601331, 0.458657473189987008),
                0.65749738442594996,
                false,
            ),
            (
                (0.722690245687922284, 1.55685271847766216),
                0.722690245687922284,
                false,
            ),
            ((0.983737009219074365, 0.0), 0.983737009219074365, true),
            ((4.14050858979568837, 0.0), 4.14050858979568837, true),
            (
                (14.6214035706304131, 1.17682803637765998),
                14.6214035706304131,
                false,
            ),
            (
                (2.22908570336760903, 0.115448058643594836),
                2.22908570336760903,
                false,
            ),
            (
                (16.8709351028115968, 0.444356778421546583),
                16.8709351028115968,
                false,
            ),
            (
                (0.63848936754859964, 3.33981634937453142),
                0.63848936754859964,
                false,
            ),
            ((3.40454161118974774, 0.0), 0.547275583980267655, false),
            (
                (0.317172502581497207, 0.317657542937801796),
                0.987890140613489898,
                false,
            ),
            ((11.4226176508608255, 0.0), 11.4226176508608255, true),
            (
                (14.7337487875237656, 3.27549710429486396),
                14.7337487875237656,
                false,
            ),
            (
                (0.941005114317850389, 0.254843260806570826),
                0.695899870570702461,
                false,
            ),
            (
                (0.928170306692367997, 0.172069948385981802),
                0.254875662389619118,
                false,
            ),
            (
                (2.85478283022238566, 0.733186999826970665),
                0.278085458687546416,
                false,
            ),
            ((0.748807431607900087, 0.0), 0.520257046222806441, false),
        ];

        // Execute tests.
        for ((hi, lo), b, true_eq) in data {
            let a: f128 = (hi, lo).into();

            assert!(a.eq(&b) == true_eq); // f128.eq(&f64)
            assert!(b.eq(&a) == true_eq); // f64.eq(&f128)
        }
    }

    #[test]
    fn partial_eq_f128_f128() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0), true),
            ((1.0, 0.0), (1.0, 0.0), true),
            // Randomly generated tests.
            (
                (1.2442665057062352, 1.64195124322335606),
                (0.410888306522224245, 1.64195124322335606),
                false,
            ),
            (
                (2.84128688529125917, 1.72997929585617549),
                (0.300165797257873124, 1.72997929585617549),
                false,
            ),
            (
                (0.544029536533214064, 0.544883853611316193),
                (0.544029536533214064, 0.544883853611316193),
                true,
            ),
            (
                (0.615574079864376067, 1.28575605229608403),
                (0.0158941946066423305, 1.28575605229608403),
                false,
            ),
            (
                (0.414407390328668135, 0.285761444756047644),
                (0.414407390328668135, 0.285761444756047644),
                true,
            ),
            (
                (5.50512170955611246, 2.71015150581508024),
                (5.50512170955611246, 0.376260569494338948),
                false,
            ),
            (
                (0.0793046587406512071, 1.21106331684705548),
                (0.0793046587406512071, 1.21106331684705548),
                true,
            ),
            (
                (4.89503425168337269, 0.923143620428061973),
                (0.0799106872081340736, 0.305940622606287072),
                false,
            ),
            (
                (0.280561564030918642, 0.366640014209018539),
                (0.718830371610275631, 0.572907783357849199),
                false,
            ),
            (
                (1.0472411496758478, 0.508280463586284648),
                (0.700964262569772179, 0.508280463586284648),
                false,
            ),
            (
                (5.51301944464073568, 1.0768448172960996),
                (0.954565462169500778, 0.138777640247148282),
                false,
            ),
            (
                (1.79931843092670918, 1.58274656009536296),
                (1.79931843092670918, 1.58274656009536296),
                true,
            ),
            (
                (1.033418947439952, 0.0572163782449259181),
                (0.92033045129865898, 0.0572163782449259181),
                false,
            ),
            (
                (0.946369671703899629, 0.548897836290050956),
                (0.946369671703899629, 0.548897836290050956),
                true,
            ),
            (
                (37.7648695679167758, 6.05983631700685965),
                (0.5388761081448179, 6.05983631700685965),
                false,
            ),
            (
                (0.0329774529165236807, 2.14670631101816412),
                (0.494919981572274126, 2.14670631101816412),
                false,
            ),
            (
                (0.901910718793773047, 0.498015527642491018),
                (0.901910718793773047, 0.706337639459566069),
                false,
            ),
            (
                (1.53703756120334645, 1.80341404840954511),
                (0.584829256676523634, 1.80341404840954511),
                false,
            ),
            (
                (4.35356365153015901, 1.2870924346616992),
                (0.899023292539186447, 0.654197430542762137),
                false,
            ),
            (
                (3.2890750216646305, 1.58378038028566026),
                (3.2890750216646305, 1.58378038028566026),
                true,
            ),
            (
                (1.8963984290308773, 1.80092187330555631),
                (0.100939623127197675, 0.100292049860717755),
                false,
            ),
            (
                (0.373022111510201315, 1.01351948181113949),
                (0.0389844030323365717, 1.01351948181113949),
                false,
            ),
            (
                (0.0131256796102033543, 4.03961390293011569),
                (0.204647665473002782, 0.0520647131149027109),
                false,
            ),
            (
                (7.31368398559052846, 0.650008277182873684),
                (7.31368398559052846, 0.650008277182873684),
                true,
            ),
            (
                (0.723757603629880064, 0.573438697619838678),
                (0.723757603629880064, 0.573438697619838678),
                true,
            ),
            (
                (0.172422951205762731, 0.0546878550234620453),
                (0.172422951205762731, 0.0546878550234620453),
                true,
            ),
            (
                (1.44882856660654746, 0.248507159332873068),
                (1.44882856660654746, 0.65733187629717027),
                false,
            ),
            (
                (1.00888499149514566, 1.2164037815076576),
                (1.00888499149514566, 1.2164037815076576),
                true,
            ),
            (
                (0.294803086827910232, 8.67358971923907873),
                (0.294803086827910232, 0.599255115538488647),
                false,
            ),
            (
                (0.67251213282525002, 7.76281688307436291),
                (0.67251213282525002, 7.76281688307436291),
                true,
            ),
        ];

        // Execute tests.
        for ((a0, a1), (b0, b1), true_eq) in data {
            let a: f128 = (a0, a1).into();
            let b: f128 = (b0, b1).into();

            assert!(a.eq(&b) == true_eq); // f128.eq(&f128)
            assert!(b.eq(&a) == true_eq); // f128.eq(&f128)
        }
    }

    #[test]
    fn partial_cmp_f64_f128() {
        // Define tests.
        let data = [
            ((0.0, 0.0), 0.0, Ordering::Equal),
            ((1.0, 0.0), 1.0, Ordering::Equal),
            // Randomly generated tests.
            (
                (1.00307532473317895, 1.21289432894089244),
                1.00307532473317895,
                Ordering::Greater,
            ),
            (
                (0.357683332987727476, 0.0),
                0.357683332987727476,
                Ordering::Equal,
            ),
            (
                (0.729658704560413596, 0.0),
                0.954204042886478865,
                Ordering::Less,
            ),
            (
                (0.996256448631745672, 6.30998538875379911),
                0.996256448631745672,
                Ordering::Greater,
            ),
            (
                (1.61498755224145984, 0.0),
                0.943297294873417069,
                Ordering::Greater,
            ),
            (
                (1.02278681952140205, 3.90168046180772876),
                0.236932710854770939,
                Ordering::Greater,
            ),
            (
                (0.296086985373407496, 0.0),
                0.42335255789726628,
                Ordering::Less,
            ),
            (
                (0.547920824776313431, 0.0),
                0.66344583996732065,
                Ordering::Less,
            ),
            (
                (0.453374762951589017, 0.0),
                0.453374762951589017,
                Ordering::Equal,
            ),
            (
                (0.478607040165371866, 0.386055334360991209),
                0.967397395506220614,
                Ordering::Less,
            ),
            (
                (1.67726535038111324, 1.36175067764350732),
                0.940538476193574446,
                Ordering::Greater,
            ),
            (
                (1.95776868138861393, 0.17265440731394982),
                1.95776868138861393,
                Ordering::Greater,
            ),
            (
                (1.00617496769887271, 0.0),
                0.948669661743878234,
                Ordering::Greater,
            ),
            (
                (0.64591169296416906, 1.38696838178906345),
                0.64591169296416906,
                Ordering::Greater,
            ),
            (
                (1.68183955069210245, 0.0),
                0.618356033516282211,
                Ordering::Greater,
            ),
            (
                (0.0437580845684622452, 0.0),
                0.0437580845684622452,
                Ordering::Equal,
            ),
            (
                (0.369631039908718761, 5.58352355031462366),
                0.369631039908718761,
                Ordering::Greater,
            ),
            (
                (1.21027925958436455, 0.0),
                0.513194723759402893,
                Ordering::Greater,
            ),
            (
                (0.0841836963298710078, 0.157951211715216366),
                0.104532783434043069,
                Ordering::Less,
            ),
            (
                (4.52602925768135034, 0.982654935309508426),
                0.71871683780044171,
                Ordering::Greater,
            ),
            (
                (0.0101839298920614486, 1.91042923461614378),
                0.0101839298920614486,
                Ordering::Greater,
            ),
            (
                (11.9560759780552583, 0.290598441086607207),
                11.9560759780552583,
                Ordering::Greater,
            ),
            (
                (0.0893723468845362967, 0.0),
                0.191265373114154369,
                Ordering::Less,
            ),
            (
                (1.72671595678712353, 0.0),
                1.72671595678712353,
                Ordering::Equal,
            ),
            (
                (0.99920507358702193, 0.000139824973465952875),
                0.956929856891245545,
                Ordering::Greater,
            ),
            (
                (1.07294498045000553, 0.185571532840423076),
                0.0811510347207780175,
                Ordering::Greater,
            ),
            (
                (57.9977279104719301, 1.28122274277496095),
                0.188901049638586616,
                Ordering::Greater,
            ),
            (
                (2.02078487285487185, 1.03001732479843855),
                2.02078487285487185,
                Ordering::Greater,
            ),
            (
                (0.895516072450574296, 0.0),
                0.0169438296076580078,
                Ordering::Greater,
            ),
            (
                (0.893690001236772891, 0.146630960412767464),
                0.893690001236772891,
                Ordering::Greater,
            ),
        ];

        // Execute tests.
        for ((hi, lo), b, true_cmp) in data {
            let a: f128 = (hi, lo).into();

            assert_eq!(a.partial_cmp(&b), Some(true_cmp)); // f128.partial_cmp(&f64)
            assert_eq!(
                b.partial_cmp(&a),
                Some(match true_cmp {
                    Ordering::Less => Ordering::Greater,
                    Ordering::Equal => Ordering::Equal,
                    Ordering::Greater => Ordering::Less,
                })
            ); // f64.partial_cmp(&f128)
        }
    }

    #[test]
    fn partial_cmp_f128_f128() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0), Ordering::Equal),
            ((1.0, 0.0), (1.0, 0.0), Ordering::Equal),
            // Randomly generated tests.
            (
                (0.0145815570010482155, 2.84620417584166985),
                (0.0145815570010482155, 2.84620417584166985),
                Ordering::Equal,
            ),
            (
                (0.998978546801194911, 1.78956653596090987),
                (0.858473569554497273, 1.78956653596090987),
                Ordering::Greater,
            ),
            (
                (1.03105602440203437, 2.46846494880893585),
                (0.426950599265727482, 0.0986885549960138941),
                Ordering::Greater,
            ),
            (
                (0.96493299186493886, 0.150829139396619266),
                (0.96493299186493886, 0.893472586243167832),
                Ordering::Less,
            ),
            (
                (2.89535305910688034, 1.22372145549037814),
                (2.89535305910688034, 0.718333884476839546),
                Ordering::Greater,
            ),
            (
                (0.57499147963841124, 1.26685613489601612),
                (0.997223374432522514, 1.26685613489601612),
                Ordering::Less,
            ),
            (
                (0.147618584701837835, 0.773599269937511158),
                (0.770274858349130898, 0.782963265563809907),
                Ordering::Less,
            ),
            (
                (3.19124223914303728, 0.632329766639815771),
                (0.146355117273682306, 0.687136208492860279),
                Ordering::Greater,
            ),
            (
                (0.0411834432199401426, 1.11575593375101234),
                (0.0411834432199401426, 1.11575593375101234),
                Ordering::Equal,
            ),
            (
                (2.67575920617206187, 0.500903448576200283),
                (0.0405421205985090349, 0.13066127948959419),
                Ordering::Greater,
            ),
            (
                (5.90409309769632795, 1.77878661507876701),
                (5.90409309769632795, 0.304523985043412049),
                Ordering::Greater,
            ),
            (
                (1.00878333321408165, 0.720402548496881789),
                (0.887078458390700875, 0.720402548496881789),
                Ordering::Greater,
            ),
            (
                (2.58126721690978878, 0.775837061676605155),
                (0.408126199808030499, 0.799028411879683098),
                Ordering::Greater,
            ),
            (
                (0.860961065005525938, 0.171420194462628322),
                (0.244354965279044101, 0.171420194462628322),
                Ordering::Greater,
            ),
            (
                (0.330826783065588215, 2.30426751352912929),
                (0.203097645753574391, 0.631659303154637697),
                Ordering::Greater,
            ),
            (
                (1.94216914673580643, 0.907762453041968453),
                (1.94216914673580643, 0.681284506656827604),
                Ordering::Greater,
            ),
            (
                (0.596491881826019199, 0.930211342583893597),
                (0.125151334854378987, 0.922134468761335313),
                Ordering::Greater,
            ),
            (
                (1.41788318707042227, 6.22037621505701654),
                (0.297177189633798411, 0.986440178931895728),
                Ordering::Greater,
            ),
            (
                (0.643641243182383804, 0.92098603950150526),
                (0.643641243182383804, 0.92098603950150526),
                Ordering::Equal,
            ),
            (
                (1.44376169478394645, 2.53874027030681848),
                (0.160214021876554008, 2.53874027030681848),
                Ordering::Greater,
            ),
            (
                (0.620750941712784776, 0.865839055315603678),
                (0.620750941712784776, 0.788161841588170153),
                Ordering::Greater,
            ),
            (
                (1.32448368115769188, 0.876360167211746366),
                (0.928611647304432353, 0.876360167211746366),
                Ordering::Greater,
            ),
            (
                (2.74521957061617394, 0.20626748394001701),
                (2.74521957061617394, 0.20626748394001701),
                Ordering::Equal,
            ),
            (
                (0.729540368550354978, 6.33006026135795086),
                (0.370782104959144321, 0.385509050165074418),
                Ordering::Greater,
            ),
            (
                (1.08823299620771685, 0.837313884713882683),
                (0.472566966187472903, 0.837313884713882683),
                Ordering::Greater,
            ),
            (
                (0.334050942226974956, 2.52540959786578423),
                (0.05167977002061893, 2.52540959786578423),
                Ordering::Greater,
            ),
            (
                (0.74990844922979305, 2.22918451492527669),
                (0.916346714327273326, 2.22918451492527669),
                Ordering::Less,
            ),
            (
                (1.22596312314578215, 1.0527604135075197),
                (0.342772825315023233, 0.825976054568763884),
                Ordering::Greater,
            ),
            (
                (0.988355509677090738, 1.11424036996344311),
                (0.754719647464677568, 1.11424036996344311),
                Ordering::Greater,
            ),
            (
                (1.62344235227162415, 0.863457277887089147),
                (1.62344235227162415, 0.659015956641647915),
                Ordering::Greater,
            ),
        ];

        // Execute tests.
        for ((a0, a1), (b0, b1), true_cmp) in data {
            let a: f128 = (a0, a1).into();
            let b: f128 = (b0, b1).into();

            assert_eq!(a.partial_cmp(&b), Some(true_cmp)); // f128.partial_cmp(&f128)
            assert_eq!(
                b.partial_cmp(&a),
                Some(match true_cmp {
                    Ordering::Less => Ordering::Greater,
                    Ordering::Equal => Ordering::Equal,
                    Ordering::Greater => Ordering::Less,
                })
            ); // f128.partial_cmp(&f128)
        }
    }

    #[test]
    fn zero() {
        assert_eq!(f128::zero(), 0.0);
        assert!(f128::zero().is_zero());
    }

    #[test]
    fn one() {
        assert_eq!(f128::one(), 1.0);
        assert!(f128::one().is_one());
    }

    #[test]
    #[ignore]
    fn from_str_radix() {
        todo!()
    }

    #[test]
    #[ignore]
    fn normalize() {
        todo!()
    }
}
