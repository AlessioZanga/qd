#[cfg(test)]
mod test {
    use approx::*;
    use qd::f128::f128;

    #[test]
    fn from_hi_lo() {
        // Define tests.
        let data = [
            ((0.0, 0.0), (0.0, 0.0)),
            ((1.0, 0.0), (1.0, 0.0)),
            // Randomly generated tests.
            (
                (1.50953211842200319, 0.185215697862007644),
                (1.50953211842200319, 0.185215697862007644),
            ),
            (
                (0.188183438240726336, 2.72474591633036045),
                (0.188183438240726336, 2.72474591633036045),
            ),
            (
                (0.23551358381471893, 2.25722104711964233),
                (0.23551358381471893, 2.25722104711964233),
            ),
            (
                (0.453801586238060883, 0.911284995758016136),
                (0.453801586238060883, 0.911284995758016136),
            ),
            (
                (0.286611929157434997, 0.812245610396971296),
                (0.286611929157434997, 0.812245610396971296),
            ),
            (
                (1.54700692170254905, 0.981826669393816909),
                (1.54700692170254905, 0.981826669393816909),
            ),
            (
                (0.672786111650033436, 2.72433060490790924),
                (0.672786111650033436, 2.72433060490790924),
            ),
            (
                (105.481342687118826, 0.912476919137740983),
                (105.481342687118826, 0.912476919137740983),
            ),
            (
                (0.800205607958772269, 0.249776364362472664),
                (0.800205607958772269, 0.249776364362472664),
            ),
            (
                (0.620160016460584385, 1.31904396948202396),
                (0.620160016460584385, 1.31904396948202396),
            ),
            (
                (3.04183350115141371, 21.5841388946337176),
                (3.04183350115141371, 21.5841388946337176),
            ),
            (
                (1.71679330092971161, 8.04912329693947015),
                (1.71679330092971161, 8.04912329693947015),
            ),
            (
                (0.447104146556772386, 33.2530442311356325),
                (0.447104146556772386, 33.2530442311356325),
            ),
            (
                (25.1648544351193877, 0.510411350259083463),
                (25.1648544351193877, 0.510411350259083463),
            ),
            (
                (0.673849237731303674, 1.39619377154339896),
                (0.673849237731303674, 1.39619377154339896),
            ),
            (
                (3.68647497597744822, 0.262220262781379498),
                (3.68647497597744822, 0.262220262781379498),
            ),
            (
                (3.11066896370674639, 0.499460076840080869),
                (3.11066896370674639, 0.499460076840080869),
            ),
            (
                (0.460059563392201554, 0.161752663558540261),
                (0.460059563392201554, 0.161752663558540261),
            ),
            (
                (0.390474943893390436, 2.91707860397945495),
                (0.390474943893390436, 2.91707860397945495),
            ),
            (
                (0.78881252549469727, 0.558175082644223663),
                (0.78881252549469727, 0.558175082644223663),
            ),
            (
                (0.236732464580251961, 21.7533220782322552),
                (0.236732464580251961, 21.7533220782322552),
            ),
            (
                (0.33859286157634394, 0.426855334607654457),
                (0.33859286157634394, 0.426855334607654457),
            ),
            (
                (23.3173314536593708, 0.504856117093058554),
                (23.3173314536593708, 0.504856117093058554),
            ),
            (
                (0.555924590152899634, 1.08753587492513737),
                (0.555924590152899634, 1.08753587492513737),
            ),
            (
                (1.69356121794607395, 0.765198496334710709),
                (1.69356121794607395, 0.765198496334710709),
            ),
            (
                (0.771337120484817063, 110.37125481784625),
                (0.771337120484817063, 110.37125481784625),
            ),
            (
                (1.4731369829225105, 1.03858227145390125),
                (1.4731369829225105, 1.03858227145390125),
            ),
            (
                (0.242370197127763143, 4.27143506081443736),
                (0.242370197127763143, 4.27143506081443736),
            ),
            (
                (1.36788481175347632, 1.0291866537869776),
                (1.36788481175347632, 1.0291866537869776),
            ),
            (
                (0.905947367905618139, 0.432046575017998646),
                (0.905947367905618139, 0.432046575017998646),
            ),
        ];

        // Execute tests.
        for ((hi, lo), (true_hi, true_lo)) in data {
            let dd: f128 = (hi, lo).into();

            assert_relative_eq!(dd.hi(), true_hi);
            assert_relative_eq!(dd.lo(), true_lo);
        }
    }

    #[test]
    #[ignore]
    fn copy() {
        todo!()
    }

    #[test]
    #[ignore]
    fn clone() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_eq_f64_f128() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_eq_f128_f64() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_eq_f128_f128() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_cmp_f64_f128() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_cmp_f128_f64() {
        todo!()
    }

    #[test]
    #[ignore]
    fn partial_cmp_f128_f128() {
        todo!()
    }

    #[test]
    #[ignore]
    fn zero() {
        todo!()
    }

    #[test]
    #[ignore]
    fn one() {
        todo!()
    }

    #[test]
    #[ignore]
    fn from_str_radix() {
        todo!()
    }

    #[test]
    #[ignore]
    fn normalize() {
        todo!()
    }
}
